import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import javax.imageio.*;

import javax.swing.*;
import java.util.Random;


public class ImageLoader extends JPanel{
    private BufferedImage img;
    private int width, height, curWidth, curHeight;
    public ImageLoader(){
        loadImage(new File("images/jerry.png"));
    }
    public ImageLoader(File f){
        loadImage(f);
    }
    public void loadImage(File f) {
        try {
            img = ImageIO.read(f);
            width = img.getWidth();
            curWidth = width;
            height = img.getHeight();
            curHeight = height;
        } catch (IOException e) {
            System.out.println("Image could not be read");
        }
    }
    public void loadImage(String s){
        try {
            URL url = new URL(s);
            width = img.getWidth();
            curWidth = width;
            height = img.getHeight();
            curHeight = height;
            img = ImageIO.read(url);
        } 
        catch (IOException e) {
            System.out.println(e);
            System.out.println("Image could not be read");
        }
    }
    public void resize(double scale){
        curWidth = (int)(Double.valueOf(width)*scale);
        curHeight = (int)(Double.valueOf(height)*scale);
        BufferedImage resizedImage = new BufferedImage(curWidth, curHeight,BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(img, 0, 0, curWidth, curHeight, null);
        g.dispose();
        img = resizedImage;
        repaint();
    }
    public void grayScale(){
        BufferedImage grayImage = new BufferedImage(curWidth, curHeight,  BufferedImage.TYPE_BYTE_GRAY);  
        Graphics2D g = grayImage.createGraphics();  
        g.drawImage(img, 0, 0, null);  
        g.dispose(); 
        img = grayImage;
        repaint();
    }
    public void colourImage(){
        BufferedImage colouredImage = new BufferedImage(width, height,  BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = colouredImage.createGraphics();  
        g.drawImage(img, 0, 0, null);  
        g.dispose(); 
        img = colouredImage;
        repaint();
    }
    public void updateImg(){
        repaint();
    }
    public void paint(Graphics g) {         
        g.drawImage(img, 50, 50, null);
    }
}
